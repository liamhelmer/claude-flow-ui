name: Release Pipeline

# Comprehensive release workflow with full regression testing and production deployment
on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*' # Pre-releases
  release:
    types: [published, edited]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.3)'
        required: true
        type: string
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - preview
      skip_tests:
        description: 'Skip tests (emergency releases only)'
        required: false
        default: false
        type: boolean

# Prevent concurrent releases
concurrency:
  group: release-pipeline
  cancel-in-progress: false

env:
  NODE_ENV: production
  CI: true
  FORCE_COLOR: 1
  RELEASE_VERSION: ${{ github.event.inputs.version || github.ref_name }}

jobs:
  # Pre-release validation and preparation
  release-preparation:
    name: Release Preparation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      skip-tests: ${{ steps.config.outputs.skip-tests }}
      target-environment: ${{ steps.config.outputs.target-environment }}
      release-notes: ${{ steps.notes.outputs.release-notes }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for changelog generation

      - name: Validate and parse version
        id: version
        run: |
          VERSION="${{ env.RELEASE_VERSION }}"

          # Remove 'v' prefix if present
          VERSION=${VERSION#v}

          # Validate version format (semantic versioning)
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: major.minor.patch or major.minor.patch-prerelease"
            exit 1
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Check if this is a prerelease
          if [[ $VERSION == *"-"* ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
            echo "üì¶ Preparing prerelease: v$VERSION"
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
            echo "üì¶ Preparing release: v$VERSION"
          fi

      - name: Configure release settings
        id: config
        run: |
          SKIP_TESTS="${{ github.event.inputs.skip_tests }}"
          TARGET_ENV="${{ github.event.inputs.environment || 'production' }}"

          echo "skip-tests=$SKIP_TESTS" >> $GITHUB_OUTPUT
          echo "target-environment=$TARGET_ENV" >> $GITHUB_OUTPUT

          echo "üîß Release Configuration:"
          echo "  Version: v${{ steps.version.outputs.version }}"
          echo "  Environment: $TARGET_ENV"
          echo "  Skip Tests: $SKIP_TESTS"
          echo "  Prerelease: ${{ steps.version.outputs.is-prerelease }}"

      - name: Generate release notes
        id: notes
        run: |
          echo "üìù Generating release notes..."

          # Get the last tag for comparison
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            echo "üìã Changes since $LAST_TAG:"
            CHANGES=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
            echo "release-notes<<EOF" >> $GITHUB_OUTPUT
            echo "## Changes since $LAST_TAG" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "$CHANGES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "release-notes=Initial release" >> $GITHUB_OUTPUT
          fi

      - name: Validate package version consistency
        run: |
          echo "üîç Validating package.json version consistency..."
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          RELEASE_VERSION="${{ steps.version.outputs.version }}"

          if [ "$PACKAGE_VERSION" != "$RELEASE_VERSION" ]; then
            echo "‚ùå Version mismatch:"
            echo "  package.json: $PACKAGE_VERSION"
            echo "  Release: $RELEASE_VERSION"
            echo ""
            echo "Please update package.json version before releasing"
            exit 1
          fi

          echo "‚úÖ Version consistency validated: v$RELEASE_VERSION"

  # Full regression test suite - comprehensive validation for releases
  comprehensive-regression-testing:
    name: Comprehensive Regression Testing
    runs-on: ubuntu-latest
    needs: release-preparation
    if: needs.release-preparation.outputs.skip-tests != 'true'

    strategy:
      fail-fast: false
      matrix:
        test-suite: [
          security-audit,
          unit-tests-comprehensive,
          integration-tests-full,
          e2e-cross-browser,
          performance-validation,
          accessibility-compliance,
          mobile-compatibility,
          api-contract-validation
        ]
        node-version: ['18.x', '20.x', '22.x']
        exclude:
          # Run some tests only on latest Node
          - test-suite: security-audit
            node-version: '18.x'
          - test-suite: security-audit
            node-version: '22.x'
          - test-suite: performance-validation
            node-version: '18.x'
          - test-suite: performance-validation
            node-version: '22.x'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      # Security audit and vulnerability assessment
      - name: Security audit
        if: matrix.test-suite == 'security-audit'
        run: |
          echo "üîê Running comprehensive security audit..."

          # npm audit
          npm audit --audit-level=low --json > security-audit.json || true

          # Check vulnerabilities
          CRITICAL=$(cat security-audit.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat security-audit.json | jq '.metadata.vulnerabilities.high // 0')
          MODERATE=$(cat security-audit.json | jq '.metadata.vulnerabilities.moderate // 0')
          LOW=$(cat security-audit.json | jq '.metadata.vulnerabilities.low // 0')

          echo "üîê Security Audit Results:"
          echo "  Critical: $CRITICAL"
          echo "  High: $HIGH"
          echo "  Moderate: $MODERATE"
          echo "  Low: $LOW"

          # Fail on critical or high vulnerabilities
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "‚ùå Critical or high severity vulnerabilities found - blocking release"
            npm audit --audit-level=high
            exit 1
          fi

          echo "‚úÖ Security audit passed"

      # Comprehensive unit tests with maximum coverage
      - name: Unit tests comprehensive
        if: matrix.test-suite == 'unit-tests-comprehensive'
        run: |
          echo "üß™ Running comprehensive unit tests..."
          npm run test:ci -- --maxWorkers=50% --coverage

          # Enforce strict coverage thresholds for releases
          if [ -f "coverage/coverage-summary.json" ]; then
            LINES_PCT=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
            STATEMENTS_PCT=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')
            FUNCTIONS_PCT=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')
            BRANCHES_PCT=$(cat coverage/coverage-summary.json | jq '.total.branches.pct')

            echo "üìä Coverage Report:"
            echo "  Lines: $LINES_PCT%"
            echo "  Statements: $STATEMENTS_PCT%"
            echo "  Functions: $FUNCTIONS_PCT%"
            echo "  Branches: $BRANCHES_PCT%"

            # Enforce 85% minimum for releases
            if (( $(echo "$LINES_PCT < 85" | bc -l) )); then
              echo "‚ùå Line coverage $LINES_PCT% below 85% threshold for releases"
              exit 1
            fi
          fi

      # Full integration testing with all services
      - name: Integration tests full
        if: matrix.test-suite == 'integration-tests-full'
        run: |
          echo "üîß Running full integration tests..."

          # Run integration tests
          if npm run --silent | grep -q "test:integration"; then
            npm run test:integration
          else
            echo "‚è≠Ô∏è Integration tests not configured, skipping"
          fi

      # Cross-browser E2E testing
      - name: E2E cross-browser
        if: matrix.test-suite == 'e2e-cross-browser' && matrix.node-version == '20.x'
        run: |
          echo "üé≠ Running cross-browser E2E tests..."
          npx playwright install --with-deps

          # Run tests across all browsers
          npx playwright test \
            --config=tests/e2e/playwright.config.ts \
            --project=chromium \
            --project=firefox \
            --project=webkit \
            --reporter=html,json

      # Performance validation and regression detection
      - name: Performance validation
        if: matrix.test-suite == 'performance-validation' && matrix.node-version == '20.x'
        run: |
          echo "üöÄ Running performance validation..."

          # Install performance testing tools
          npm install -g lighthouse autocannon

          # Run performance tests
          if npm run --silent | grep -q "test:performance"; then
            npm run test:performance:ci
          fi

          # Lighthouse audit
          npm run lighthouse:ci || echo "Lighthouse CI not configured"

      # Accessibility compliance testing
      - name: Accessibility compliance
        if: matrix.test-suite == 'accessibility-compliance' && matrix.node-version == '20.x'
        run: |
          echo "‚ôø Running accessibility compliance tests..."
          npx playwright install --with-deps chromium

          npx playwright test \
            --config=tests/e2e/playwright.config.ts \
            --project=accessibility \
            --reporter=html

      # Mobile compatibility testing
      - name: Mobile compatibility
        if: matrix.test-suite == 'mobile-compatibility' && matrix.node-version == '20.x'
        run: |
          echo "üì± Running mobile compatibility tests..."
          npx playwright install --with-deps

          npx playwright test \
            --config=tests/e2e/playwright.config.ts \
            --project=mobile-chrome \
            --project=mobile-safari \
            --project=tablet \
            --reporter=html

      # API contract validation
      - name: API contract validation
        if: matrix.test-suite == 'api-contract-validation' && matrix.node-version == '20.x'
        run: |
          echo "üåê Running API contract validation..."
          npx playwright test \
            --config=tests/e2e/playwright.config.ts \
            --project=api \
            --reporter=html

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: regression-results-${{ matrix.test-suite }}-node${{ matrix.node-version }}
          path: |
            test-results/
            coverage/
            tests/e2e/reports/
            security-audit.json
          retention-days: 30

  # Production build and artifact preparation
  production-build:
    name: Production Build
    runs-on: ubuntu-latest
    needs: [release-preparation, comprehensive-regression-testing]
    if: always() && needs.release-preparation.result == 'success' && (needs.comprehensive-regression-testing.result == 'success' || needs.release-preparation.outputs.skip-tests == 'true')

    strategy:
      matrix:
        node-version: ['18.x', '20.x', '22.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --production=false

      - name: Build for production
        run: |
          echo "üèóÔ∏è Building for production with Node.js ${{ matrix.node-version }}"
          npm run build:static
        env:
          NODE_ENV: production
          NODE_OPTIONS: '--max-old-space-size=8192'

      - name: Optimize build artifacts
        run: |
          echo "‚ö° Optimizing build artifacts..."

          # Remove source maps in production builds (optional)
          # find .next -name "*.map" -type f -delete

          # Compress static assets if not already compressed
          if command -v gzip &> /dev/null; then
            find .next/static -name "*.js" -o -name "*.css" | while read file; do
              gzip -9 -c "$file" > "$file.gz"
            done
          fi

      - name: Validate production build
        run: |
          echo "üîç Validating production build..."

          # Check essential files exist
          if [ ! -d ".next" ]; then
            echo "‚ùå Build output directory not found"
            exit 1
          fi

          # Analyze bundle size
          echo "üì¶ Bundle analysis:"
          du -sh .next/static/* 2>/dev/null || echo "No static files found"

          # Test production server startup
          echo "üöÄ Testing production server..."
          timeout 30 npm start &
          SERVER_PID=$!

          sleep 15

          # Health check
          if curl -f http://localhost:3000/health 2>/dev/null; then
            echo "‚úÖ Production build validation successful"
          else
            echo "‚ùå Production build health check failed"
            exit 1
          fi

          kill $SERVER_PID 2>/dev/null || true

      - name: Create deployment package
        if: matrix.node-version == '20.x' # Create package only once
        run: |
          echo "üì¶ Creating deployment package..."

          # Create deployment archive
          tar -czf claude-flow-ui-v${{ needs.release-preparation.outputs.version }}.tar.gz \
            .next/ \
            public/ \
            package.json \
            package-lock.json \
            next.config.js \
            unified-server.js \
            websocket-server.js \
            --exclude=.next/cache

          echo "‚úÖ Deployment package created: claude-flow-ui-v${{ needs.release-preparation.outputs.version }}.tar.gz"
          ls -lh *.tar.gz

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build-node${{ matrix.node-version }}
          path: |
            .next/
            public/
            *.tar.gz
          retention-days: 90

  # Security and compliance validation
  security-compliance-validation:
    name: Security & Compliance Validation
    runs-on: ubuntu-latest
    needs: [release-preparation, production-build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download production build
        uses: actions/download-artifact@v4
        with:
          name: production-build-node20.x
          path: ./

      - name: Container security scan (if applicable)
        run: |
          echo "üîê Running container security scan..."
          # Add container scanning if using Docker
          # trivy image your-image:tag
          echo "‚ö†Ô∏è Container scanning not configured"

      - name: OWASP dependency check
        run: |
          echo "üõ°Ô∏è Running OWASP dependency check..."
          # Add OWASP dependency check
          npm audit --production --audit-level=moderate

      - name: License compliance check
        run: |
          echo "üìÑ Checking license compliance..."
          npx license-checker --summary
          npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0'

  # Staging deployment and validation
  staging-deployment:
    name: Staging Deployment & Validation
    runs-on: ubuntu-latest
    needs: [release-preparation, production-build, security-compliance-validation]
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download production build
        uses: actions/download-artifact@v4
        with:
          name: production-build-node20.x
          path: ./

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying v${{ needs.release-preparation.outputs.version }} to staging..."
          echo "Staging URL: https://staging.claude-flow-ui.com"

          # Add actual staging deployment logic here
          # Examples:
          # - Deploy to staging infrastructure
          # - Update container registry with staging tag
          # - Trigger infrastructure provisioning

          echo "‚úÖ Staging deployment completed"

      - name: Staging smoke tests
        run: |
          echo "üí® Running staging smoke tests..."

          # Wait for staging deployment
          sleep 60

          # Basic smoke tests
          STAGING_URL="https://staging.claude-flow-ui.com"

          # Health check
          if curl -f "$STAGING_URL/health" 2>/dev/null; then
            echo "‚úÖ Staging health check passed"
          else
            echo "‚ùå Staging health check failed"
            exit 1
          fi

          # Additional smoke tests
          echo "üåç Staging environment validated: $STAGING_URL"

      - name: Staging performance validation
        run: |
          echo "üöÄ Validating staging performance..."

          # Basic performance check
          STAGING_URL="https://staging.claude-flow-ui.com"

          # Measure response time
          RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" "$STAGING_URL")
          echo "Response time: ${RESPONSE_TIME}s"

          # Validate performance threshold (e.g., < 2 seconds)
          if (( $(echo "$RESPONSE_TIME < 2.0" | bc -l) )); then
            echo "‚úÖ Staging performance validation passed"
          else
            echo "‚ö†Ô∏è Staging response time above threshold"
          fi

  # Production deployment
  production-deployment:
    name: Production Deployment
    runs-on: ubuntu-latest
    needs: [release-preparation, staging-deployment]
    if: needs.release-preparation.outputs.target-environment == 'production'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download production build
        uses: actions/download-artifact@v4
        with:
          name: production-build-node20.x
          path: ./

      - name: Pre-deployment backup
        run: |
          echo "üíæ Creating pre-deployment backup..."
          # Add backup logic for rollback capability
          echo "‚úÖ Backup completed"

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying v${{ needs.release-preparation.outputs.version }} to production..."
          echo "Production URL: https://claude-flow-ui.com"

          # Add actual production deployment logic here
          # Examples:
          # - Blue/green deployment
          # - Rolling deployment
          # - Infrastructure updates

          echo "‚úÖ Production deployment completed"

      - name: Post-deployment validation
        run: |
          echo "üîç Running post-deployment validation..."

          # Wait for deployment propagation
          sleep 120

          # Production smoke tests
          PROD_URL="https://claude-flow-ui.com"

          # Health check
          if curl -f "$PROD_URL/health" 2>/dev/null; then
            echo "‚úÖ Production health check passed"
          else
            echo "‚ùå Production health check failed - consider rollback"
            exit 1
          fi

          echo "üåç Production deployment validated: $PROD_URL"

      - name: Deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üéâ Production deployment successful!"
            echo "Version: v${{ needs.release-preparation.outputs.version }}"
            echo "URL: https://claude-flow-ui.com"
          else
            echo "‚ùå Production deployment failed!"
            echo "Consider rollback procedures"
          fi

  # GitHub release creation and artifact publishing
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [release-preparation, production-deployment]
    if: always() && needs.release-preparation.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          echo "üì¶ Preparing release assets..."
          mkdir -p release-assets

          # Copy deployment package
          cp artifacts/production-build-node20.x/*.tar.gz release-assets/ 2>/dev/null || true

          # Create checksums
          cd release-assets
          for file in *.tar.gz; do
            if [ -f "$file" ]; then
              sha256sum "$file" > "$file.sha256"
            fi
          done
          cd ..

          ls -la release-assets/

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.release-preparation.outputs.version }}
          release_name: Release v${{ needs.release-preparation.outputs.version }}
          body: |
            ## Release v${{ needs.release-preparation.outputs.version }}

            ${{ needs.release-preparation.outputs.release-notes }}

            ### Deployment Status
            - **Staging**: ‚úÖ Deployed to https://staging.claude-flow-ui.com
            - **Production**: ${{ needs.production-deployment.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.production-deployment.result == 'success' && 'Deployed to https://claude-flow-ui.com' || 'Deployment failed or skipped' }}

            ### Test Results
            - **Regression Tests**: ${{ needs.comprehensive-regression-testing.result == 'success' && '‚úÖ Passed' || (needs.release-preparation.outputs.skip-tests == 'true' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }}
            - **Security Validation**: ${{ needs.security-compliance-validation.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}

            ### Installation
            ```bash
            npm install @liamhelmer/claude-flow-ui@${{ needs.release-preparation.outputs.version }}
            ```

            ---
            *This release was automatically created by the CI/CD pipeline.*
          draft: false
          prerelease: ${{ needs.release-preparation.outputs.is-prerelease == 'true' }}

      - name: Upload release assets
        if: steps.create_release.outputs.upload_url
        run: |
          echo "üìé Uploading release assets..."

          for file in release-assets/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Uploading $filename..."

              curl \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$file" \
                "${{ steps.create_release.outputs.upload_url }}?name=$filename"
            fi
          done

  # NPM package publishing (if applicable)
  npm-publish:
    name: Publish NPM Package
    runs-on: ubuntu-latest
    needs: [release-preparation, github-release]
    if: needs.release-preparation.outputs.target-environment == 'production' && !contains(needs.release-preparation.outputs.version, 'beta')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Publish to NPM
        run: |
          echo "üì¶ Publishing v${{ needs.release-preparation.outputs.version }} to NPM..."

          if [[ "${{ needs.release-preparation.outputs.is-prerelease }}" == "true" ]]; then
            npm publish --tag beta
          else
            npm publish
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Release summary and notifications
  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [
      release-preparation,
      comprehensive-regression-testing,
      production-build,
      security-compliance-validation,
      staging-deployment,
      production-deployment,
      github-release,
      npm-publish
    ]
    if: always()

    steps:
      - name: Generate release summary
        run: |
          echo "# üöÄ Release Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${{ needs.release-preparation.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ needs.release-preparation.outputs.is-prerelease == 'true' && 'Pre-release' || 'Release' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target:** ${{ needs.release-preparation.outputs.target-environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Pipeline Status Table
          echo "## Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY

          # Check each stage
          declare -A stages
          stages["Release Preparation"]="${{ needs.release-preparation.result }}"
          stages["Regression Testing"]="${{ needs.comprehensive-regression-testing.result }}"
          stages["Production Build"]="${{ needs.production-build.result }}"
          stages["Security Validation"]="${{ needs.security-compliance-validation.result }}"
          stages["Staging Deployment"]="${{ needs.staging-deployment.result }}"
          stages["Production Deployment"]="${{ needs.production-deployment.result }}"
          stages["GitHub Release"]="${{ needs.github-release.result }}"
          stages["NPM Publish"]="${{ needs.npm-publish.result }}"

          for stage in "${!stages[@]}"; do
            status="${stages[$stage]}"
            case $status in
              "success") icon="‚úÖ"; details="Completed successfully" ;;
              "failure") icon="‚ùå"; details="Failed - check logs" ;;
              "cancelled") icon="‚è∏Ô∏è"; details="Cancelled" ;;
              "skipped") icon="‚è≠Ô∏è"; details="Skipped" ;;
              *) icon="‚ùì"; details="Unknown status" ;;
            esac
            echo "| $stage | $icon | $details |" >> $GITHUB_STEP_SUMMARY
          done

          echo "" >> $GITHUB_STEP_SUMMARY

          # Deployment URLs
          echo "## Deployment URLs" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.staging-deployment.result }}" == "success" ]]; then
            echo "- üèóÔ∏è **Staging**: https://staging.claude-flow-ui.com" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "${{ needs.production-deployment.result }}" == "success" ]]; then
            echo "- üåç **Production**: https://claude-flow-ui.com" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Release completed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')*" >> $GITHUB_STEP_SUMMARY

      - name: Notify stakeholders
        if: needs.production-deployment.result == 'success'
        run: |
          echo "üì¢ Notifying stakeholders about successful release..."
          # Add notification logic (Slack, email, etc.)
          echo "‚úÖ Release v${{ needs.release-preparation.outputs.version }} deployed successfully"