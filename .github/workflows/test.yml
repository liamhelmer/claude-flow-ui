name: Test Suite

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'rest-api/**'
      - 'tests/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'rest-api/**'
      - 'tests/**'
      - '.github/workflows/test.yml'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_pass
          POSTGRES_USER: test_user
          POSTGRES_DB: claude_flow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'rest-api/package-lock.json'

    - name: Install dependencies
      working-directory: ./rest-api
      run: npm ci

    - name: Install root dependencies (for shared types)
      run: npm ci

    - name: Run linting
      working-directory: ./rest-api
      run: npm run lint

    - name: Run type checking
      working-directory: ./rest-api
      run: npm run type-check

    - name: Run unit tests
      working-directory: ./rest-api
      run: npm run test:unit
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key-for-ci
        JWT_EXPIRES_IN: 1h
        JWT_REFRESH_EXPIRES_IN: 7d
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_NAME: claude_flow_test
        TEST_DB_USER: test_user
        TEST_DB_PASS: test_pass
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Run integration tests
      working-directory: ./rest-api
      run: npm run test:integration
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key-for-ci
        JWT_EXPIRES_IN: 1h
        JWT_REFRESH_EXPIRES_IN: 7d
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_NAME: claude_flow_test
        TEST_DB_USER: test_user
        TEST_DB_PASS: test_pass
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Run E2E tests
      working-directory: .
      run: npm run test:e2e
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key-for-ci
        JWT_EXPIRES_IN: 1h
        JWT_REFRESH_EXPIRES_IN: 7d
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_NAME: claude_flow_test
        TEST_DB_USER: test_user
        TEST_DB_PASS: test_pass
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Generate coverage report
      working-directory: ./rest-api
      run: npm run test:coverage
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key-for-ci
        JWT_EXPIRES_IN: 1h
        JWT_REFRESH_EXPIRES_IN: 7d
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_NAME: claude_flow_test
        TEST_DB_USER: test_user
        TEST_DB_PASS: test_pass
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./rest-api/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_pass
          POSTGRES_USER: test_user
          POSTGRES_DB: claude_flow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'rest-api/package-lock.json'

    - name: Install dependencies
      working-directory: ./rest-api
      run: npm ci

    - name: Run performance tests
      working-directory: .
      run: npm run test:performance
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key-for-ci
        JWT_EXPIRES_IN: 1h
        JWT_REFRESH_EXPIRES_IN: 7d
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_NAME: claude_flow_test
        TEST_DB_USER: test_user
        TEST_DB_PASS: test_pass
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Store performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results.json

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'rest-api/package-lock.json'

    - name: Install dependencies
      working-directory: ./rest-api
      run: npm ci

    - name: Run security audit
      working-directory: ./rest-api
      run: npm audit --audit-level=moderate

    - name: Run security tests
      working-directory: .
      run: npm run test:security
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key-for-ci

  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, performance, security]
    if: always()

    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "‚ùå Tests failed"
          exit 1
        fi
        if [[ "${{ needs.performance.result }}" != "success" && "${{ needs.performance.result }}" != "skipped" ]]; then
          echo "‚ùå Performance tests failed"
          exit 1
        fi
        if [[ "${{ needs.security.result }}" != "success" ]]; then
          echo "‚ùå Security tests failed"
          exit 1
        fi
        echo "‚úÖ All quality gates passed"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your deployment steps here

  deploy-production:
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        # Add your deployment steps here