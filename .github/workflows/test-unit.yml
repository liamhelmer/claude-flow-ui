name: Unit Tests

on:
  workflow_call:
    inputs:
      cache-key:
        required: true
        type: string
    outputs:
      coverage:
        description: "Test coverage percentage"
        value: ${{ jobs.unit-tests.outputs.coverage }}

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      coverage: ${{ steps.coverage.outputs.coverage }}
    strategy:
      matrix:
        node-version: ['16', '18', '20']
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ inputs.cache-key }}
          fail-on-cache-miss: true

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: |
          npm run test:unit -- --coverage --coverageReporters=json --coverageReporters=lcov --coverageReporters=text
        env:
          NODE_ENV: test
          CI: true

      - name: Extract coverage
        id: coverage
        if: matrix.node-version == '18'
        run: |
          COVERAGE=$(node -e "
            const coverage = require('./coverage/coverage-summary.json');
            const totalCoverage = coverage.total.lines.pct;
            console.log(totalCoverage);
          ")
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

      - name: Upload coverage to Codecov
        if: matrix.node-version == '18'
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unit
          name: unit-tests
          fail_ci_if_error: false

      - name: Check coverage threshold
        if: matrix.node-version == '18'
        run: |
          COVERAGE=${{ steps.coverage.outputs.coverage }}
          THRESHOLD=95
          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below threshold $THRESHOLD%"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets threshold $THRESHOLD%"
          fi

      - name: Generate test report
        if: always()
        run: |
          mkdir -p test-results
          echo "{
            \"type\": \"unit\",
            \"nodeVersion\": \"${{ matrix.node-version }}\",
            \"status\": \"${{ job.status }}\",
            \"coverage\": \"${{ steps.coverage.outputs.coverage || 'N/A' }}\",
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
          }" > test-results/unit-${{ matrix.node-version }}.json

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-unit-${{ matrix.node-version }}
          path: |
            test-results/
            coverage/
            junit.xml
          retention-days: 30

      - name: Publish test results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Unit Tests (Node ${{ matrix.node-version }})
          path: junit.xml
          reporter: jest-junit
          fail-on-error: true

  unit-tests-summary:
    name: Unit Tests Summary
    runs-on: ubuntu-latest
    needs: unit-tests
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## Unit Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Node Version | Status | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|--------------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| 16 | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | N/A |" >> $GITHUB_STEP_SUMMARY
          echo "| 18 | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | ${{ needs.unit-tests.outputs.coverage }}% |" >> $GITHUB_STEP_SUMMARY
          echo "| 20 | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | N/A |" >> $GITHUB_STEP_SUMMARY

      - name: Create final artifact
        if: needs.unit-tests.result == 'success'
        run: |
          mkdir -p final-results
          echo "Unit tests completed successfully" > final-results/results.json

      - name: Upload final results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-unit
          path: final-results/
          retention-days: 30